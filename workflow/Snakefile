import pandas as pd
import os


if os.path.isfile("config/configfile.yaml"):
    configfile: "config/configfile.yaml"

samples = (
    pd.read_csv(config["samples"], sep="\t", dtype={"sample": str})
    .set_index("sample", drop=False)
    .sort_index()

)

outdir = config["outdir"]

# # Dynamically load all modules/rules
# smks = list(listfiles('rules/core/{section}/{part}.smk'))
#
# for smk,rule in smks:
#     include: smk

include: "rules/common.smk"
include: "rules/preprocessing.smk"
include: "rules/coassembly.smk"
include: "rules/single_sample_assembly.smk"
include: "rules/gene_prediction.smk"

# # Load report
#for rpt, rule in list(listfiles('workflow/rules/report/{part}.smk')):
#    name = rule
#    include: rpt
#

# Dynamically add all output files
# outfiles = []
# for name,rule in rules.__dict__.items():
#     for file in rule.output:
#         outfiles.append(file)

target = None

# if config['assembly_method'] == "coassembly":
#     target = expand("{outdir}/results/03_assembly/coassembly/assembly_{sample_pool}/{sample_pool}_assembly.fasta.gz",
#         sample_pool=samples["sample_pool"].unique())
# elif config['assembly_method'] == "single_assembly":
#     target = expand("{outdir}/results/03_assembly/single_sample_assembly/{sample}/assembly.fasta.gz", sample=samples["sample"])
# else:
#     raise ValueError("Unsupported assembly type")

# if config['assembly_method'] == "coassembly":
#     target = expand("results/04_gene_prediction/prodigal/{sample_pool}/{sample_pool}_genes.gff",
#         sample_pool=samples["sample_pool"].unique())
# elif config['assembly_method'] == "single_assembly":
#     target = expand("results/04_gene_prediction/prodigal/{sample}/{sample}_genes.gff", sample=samples["sample"])
# else:
#     raise ValueError("Unsupported assembly type")

if config['assembly_method'] == "coassembly":
    target = expand(f"{config['outdir']}/results/05_test/{{sample_pool}}/{{sample_pool}}_test.txt",
                    sample_pool=samples["sample_pool"].unique())
elif config['assembly_method'] == "single_assembly":
    target = expand(f"{config['outdir']}/results/05_test/{{sample}}/{{sample}}_test.txt",
                    sample=samples["sample"])
else:
    raise ValueError("Unsupported assembly type")

rule all:
    input:
        target

    # input: expand(output,
    #               sample=config["data"],
    #               treatment=config["treatment"],
    #               assembler=config["assembler"],
    #               binner=config["binner"],
    #               kmers=config["assembly-klist"]
    #              )

